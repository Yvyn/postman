{
	"info": {
		"_postman_id": "01e63696-9aef-4a5f-9523-df9085fe0c47",
		"name": "hw2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20888572"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"\r",
							"let resp = pm.response.json()\r",
							"\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test(\"Name Check\", function () { \r",
							"    pm.expect(resp.name).is.to.equal(\"Tom\"); \r",
							"});\r",
							"\r",
							"/*\r",
							"5. Проверить, что age в ответе равно age s request (age вбить руками.)*/\r",
							"\r",
							"pm.test(\"Age Check\", function () { \r",
							"    pm.expect(resp.age).is.to.equal(\"2\"); \r",
							"});\r",
							"/*\r",
							"/*\r",
							"6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)*/\r",
							"pm.test(\"Salary Check\", function () { \r",
							"    pm.expect(resp.salary).is.to.equal(12000); \r",
							"});\r",
							"\r",
							"\r",
							"/*7. Спарсить request.*/\r",
							"\r",
							"let requ =request.data\r",
							"\r",
							"/*\r",
							"8. Проверить, что name в ответе равно name s request (name забрать из request.)*/\r",
							"pm.test(\"Name Check 2\", function () { \r",
							"    pm.expect(resp.name).is.to.equal(requ.name); \r",
							"});\r",
							"\r",
							"/*\r",
							"9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"*/\r",
							"pm.test(\"Age Check 2\", function () { \r",
							"    pm.expect(resp.age).is.to.equal(requ.age); \r",
							"});\r",
							"/*\r",
							"10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)*/\r",
							"pm.test(\"Salary Check 2\", function () { \r",
							"    pm.expect(resp.salary).is.to.equal(Number(requ.salary)); \r",
							"});\r",
							"\r",
							"\r",
							"/*\r",
							"11. Вывести в консоль параметр family из response.\r",
							"*/\r",
							"console.log(resp.family)\r",
							"/*\r",
							"12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"*/\r",
							"let requ_selary = requ.salary\r",
							"let resp_selary_1_5 = resp.family.u_salary_1_5_year\r",
							"\r",
							"let requ_selary_1_5 = requ.salary * 4\r",
							"\r",
							"pm.test(\"u_salary_1_5_year Check \", function () { \r",
							"    pm.expect(requ_selary_1_5).is.to.equal(resp_selary_1_5); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "name",
						"value": "Tom",
						"type": "text"
					},
					{
						"key": "age",
						"value": "2",
						"type": "text"
					},
					{
						"key": "salary",
						"value": "12000",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "2",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Tom",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "12000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3?name=Bob",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let resp = pm.response.json()\r",
							"\r",
							"//4. Спарсить request.\r",
							"let requ =  pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name Check \", function () { \r",
							"    pm.expect(resp.name).is.to.equal(requ.name); \r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age Check 2\", function () { \r",
							"    pm.expect(resp.age).is.to.equal(requ.age); \r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary Check 2\", function () { \r",
							"    pm.expect(resp.salary).is.to.equal(Number(requ.salary)); \r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(resp.family)\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog name\", function () { \r",
							"    pm.expect(JSON.stringify(resp.family.pets.dog)).to.include(\"name\"); \r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog age\", function () { \r",
							"    pm.expect(JSON.stringify(resp.family.pets.dog)).to.include(\"age\"); \r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog Luky name\", function () { \r",
							"    pm.expect(JSON.stringify(resp.family.pets.dog.name)).to.include(\"Luky\"); \r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age 4\", function () { \r",
							"    pm.expect(JSON.stringify(resp.family.pets.dog.age)).to.include(\"4\"); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Bob&salary=15000&age=44",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Bob"
						},
						{
							"key": "salary",
							"value": "15000"
						},
						{
							"key": "age",
							"value": "44"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let resp = pm.response.json()\r",
							"//4. Спарсить request.\r",
							"let requ =  pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name Check \", function () { \r",
							"    pm.expect(resp.name).is.to.equal(requ.name); \r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age Check 2\", function () { \r",
							"    pm.expect(resp.age).is.to.equal(Number(requ.age)); \r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(requ.salary)\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(resp.salary)\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp.salary[0])\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[1])\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[2])\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary Check 0 element\", function () { \r",
							"    pm.expect(resp.salary[0]).is.to.equal(Number(requ.salary)); \r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary Check 1 element\", function () { \r",
							"    pm.expect(Number(resp.salary[1])).is.to.equal(requ.salary *2); \r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary Check 2 element\", function () { \r",
							"    pm.expect(Number(resp.salary[2])).is.to.equal(requ.salary *3); \r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"//18. Передать в окружение переменную name\r",
							"//19. Передать в окружение переменную age\r",
							"//20. Передать в окружение переменную salary\r",
							"\r",
							"pm.environment.set(\"name\", requ.name )\r",
							"pm.environment.set(\"age\", requ.age )\r",
							"pm.environment.set(\"salary\", requ.salary )\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i =0; i.length; i++) { console.log(resp.salary[i])}\r",
							"//resp.salary.forEach((item) => {console.log(item)})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Bobbi&salary=10000&age=15",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Bobbi"
						},
						{
							"key": "salary",
							"value": "10000"
						},
						{
							"key": "age",
							"value": "15"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"let resp = pm.response.json()\r",
							"//7. Спарсить request.\r",
							"let requ =request.data\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\" start_qa_salary\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"start_qa_salary\"); \r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_6_months\"); \r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_12_months\"); \r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_1.5_year\"); \r",
							"});\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_3.5_years\"); \r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"person\"); \r",
							"});\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\" start_qa_salary равен salary\", function () { \r",
							"    pm.expect(resp.start_qa_salary).is.to.equal(Number(requ.salary)); \r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months равен salary*2\", function () { \r",
							"    pm.expect(resp.qa_salary_after_6_months).is.to.equal(Number(requ.salary*2 )); \r",
							"});\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months равен salary*2.7\", function () { \r",
							"    pm.expect(resp.qa_salary_after_12_months).is.to.equal(Number(requ.salary*2.7 )); \r",
							"});\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year равен salary*3.3\", function () { \r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).is.to.equal(Number(requ.salary*3.3 )); \r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years равен salary*3.8\", function () { \r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).is.to.equal(Number(requ.salary*3.8 )); \r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person, 1-й элемент из u_name равен salary\", function () { \r",
							"    pm.expect(resp.person.u_name[1]).is.to.equal(Number(requ.salary)); \r",
							"});\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age равен age\", function () { \r",
							"    pm.expect(resp.person.u_age).is.to.equal(Number(requ.age)); \r",
							"});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years равен salary*4.2\", function () { \r",
							"    pm.expect(resp.person.u_salary_5_years).is.to.equal(Number(requ.salary*4.2)); \r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (  i in  resp.person) console.log( resp.person[i] )\r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}