{
	"info": {
		"_postman_id": "90a70478-3d3b-4085-af32-77c167cae617",
		"name": "anatoliy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20888572"
	},
	"item": [
		{
			"name": "user_info_2_CSV",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"1. (ОБЯЗАТЕЛЬНОЕ И ВАЖНЕЙШЕЕ ЗАДАНИЕ) http://162.55.220.72:5005/user_info_2\r",
							"Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
							"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
							"Требования:\r",
							"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
							"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
							"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное**/\r",
							"\r",
							"//7. Спарсить request.\r",
							"let requ =request.data\r",
							"let name = requ.name\r",
							"let age = requ.age\r",
							"let salary = requ.salary\r",
							"function ageval (value){\r",
							"    return value && !isNaN(value)  && value>=18 && value>=120 && Namber.isIneger(+value)\r",
							"}\r",
							"\r",
							"function salaryval (value){\r",
							"    return value && !isNaN(value)  && value>=1 && value>=1000000 && Namber.isIneger(+value)\r",
							"}\r",
							"\r",
							"function nameval (value){\r",
							"    return value && value.length>=3  && value.length<40 && value.trin()=== value\r",
							"}\r",
							"\r",
							"function val(age, name, salary){\r",
							"return ageval(age) && nameval(name)  && salaryval(salary)}\r",
							"if (val(age, name, salary)) {\r",
							"    pm.test(`code 200 age== ${age}, salary ==${salary}, name == ${name}`, function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});}\r",
							"    else { pm.test(`Not code 200 age== ${age}, salary ==${salary}, name == ${name}`, function () {\r",
							"     pm.response.to.have.status(200);\r",
							"});}\r",
							"         \r",
							"\r",
							"\r",
							"/*\r",
							"\r",
							"4. http://162.55.220.72:5005/user_info_2\r",
							"\r",
							"\r",
							"\r",
							"/*\r",
							"\r",
							"1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"*/ "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4?age=21&name=Lin&salary=500",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"2. http://162.55.220.72:5007/object_info_4\r",
							"* Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary\r",
							" */\r",
							"//3. Спарсить response body в json.\r",
							"let resp = pm.response.json()\r",
							"//4. Спарсить request.\r",
							"let requ =  pm.request.url.query.toObject();\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"\r",
							"    for(i=0; i<=3; i++ ){\r",
							"        if (i==0) {pm.test(\"Salary Check 0 element\", function () { \r",
							"    pm.expect(resp.salary[0]).is.to.equal(Number(requ.salary)); \r",
							"})} else if (i == 2) {pm.test(\"Salary Check 1 element\", function () { \r",
							"    pm.expect(Number(resp.salary[1])).is.to.equal(requ.salary *2); \r",
							"})} else if (i == 3) {pm.test(\"Salary Check 2 element\", function () { \r",
							"    pm.expect(Number(resp.salary[2])).is.to.equal(requ.salary *3); \r",
							"\r",
							"})}\r",
							"    }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?age=21&name=Lin&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "21"
						},
						{
							"key": "name",
							"value": "Lin"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3?age=12&name=Anya&salary=100",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*3. http://162.55.220.72:5005/object_info_3\r",
							" Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов) */\r",
							"//3. Спарсить response body в json.\r",
							"let resp = pm.response.json()\r",
							"//4. Спарсить request.\r",
							"let requ =  pm.request.url.query.toObject();\r",
							" //5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name Check \", function () { \r",
							"    pm.expect(resp.name).is.to.equal(requ.name); \r",
							"    pm.expect(resp.age).is.to.equal(requ.age) \r",
							"    pm.expect(resp.salary).is.to.equal(Number(requ.salary))\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?age=12&name=Anya&salary=100",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "12"
						},
						{
							"key": "name",
							"value": "Anya"
						},
						{
							"key": "salary",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resp = pm.response.json()\r",
							"//7. Спарсить request.\r",
							"let requ =request.data/*\r",
							"4. http://162.55.220.72:5005/user_info_2\r",
							"1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом) */\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    for(i=0; i<=7; i++ ){\r",
							"        if (i==0) {\r",
							"            pm.test(\" start_qa_salary\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"start_qa_salary\"); \r",
							"})} else if (i == 2) {pm.test(\"qa_salary_after_6_months\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_6_months\") \r",
							"})} else if (i == 3) {pm.test(\"qa_salary_after_12_months\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_12_months\"); \r",
							"})}else if (i == 3) {\r",
							"    pm.test(\"qa_salary_after_12_months\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_12_months\"); \r",
							"})} else if (i==4){ \r",
							"    pm.test(\"qa_salary_after_1.5_year\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_1.5_year\"); \r",
							"})} else if (i==5){\r",
							"    pm.test(\"qa_salary_after_3.5_years\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_3.5_years\"); \r",
							"})} else if (i==6)\r",
							"{\r",
							"    pm.test(\"person\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"person\"); \r",
							"});\r",
							"}\r",
							"}\r",
							"    \r",
							"/*\r",
							"2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"\r",
							"*/\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"\r",
							"\r",
							"   for(i=0; i<=6; i++ ){\r",
							"        if (i==0) {\r",
							"            pm.test(\" start_qa_salary равен salary\", function () { \r",
							"    pm.expect(resp.start_qa_salary).is.to.equal(Number(requ.salary)); \r",
							"})} else if (i == 2) {pm.test(\"qa_salary_after_6_months равен salary*2\", function () { \r",
							"    pm.expect(resp.qa_salary_after_6_months).is.to.equal(Number(requ.salary*2 ))  \r",
							"})} else if (i == 3) {pm.test(\"qa_salary_after_12_months\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_12_months\") \r",
							"})}else if (i == 3) {\r",
							"    pm.test(\"qa_salary_after_12_months равен salary*2.7\", function () { \r",
							"    pm.expect(resp.qa_salary_after_12_months).is.to.equal(Number(requ.salary*2.7 )) \r",
							"})} else if (i==4){ \r",
							"    pm.test(\"qa_salary_after_1.5_year равен salary*3.3\", function () { \r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).is.to.equal(Number(requ.salary*3.3 )) \r",
							"})} else if (i==5){\r",
							"    pm.test(\"qa_salary_after_3.5_years равен salary*3.8\", function () { \r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).is.to.equal(Number(requ.salary*3.8 )) \r",
							"})} \r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"/*\r",
							"\r",
							"3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста. */\r",
							"for(i=0; i<=3; i++ ){\r",
							"\r",
							"    if (i==0) {for(i=0; i<=7; i++ ){\r",
							"        if (i==0) {\r",
							"            pm.test(\" start_qa_salary\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"start_qa_salary\"); \r",
							"})} else if (i == 2) {pm.test(\"qa_salary_after_6_months\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_6_months\") \r",
							"})} else if (i == 3) {pm.test(\"qa_salary_after_12_months\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_12_months\"); \r",
							"})}else if (i == 3) {\r",
							"    pm.test(\"qa_salary_after_12_months\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_12_months\"); \r",
							"})} else if (i==4){ \r",
							"    pm.test(\"qa_salary_after_1.5_year\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_1.5_year\"); \r",
							"})} else if (i==5){\r",
							"    pm.test(\"qa_salary_after_3.5_years\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_3.5_years\"); \r",
							"})} else if (i==6)\r",
							"{\r",
							"    pm.test(\"person\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"person\"); \r",
							"});\r",
							"}\r",
							"}\r",
							"   } else if (i == 1 ) { for(i=0; i<=6; i++ ){\r",
							"        if (i==0) {\r",
							"            pm.test(\" start_qa_salary равен salary\", function () { \r",
							"    pm.expect(resp.start_qa_salary).is.to.equal(Number(requ.salary)); \r",
							"})} else if (i == 2) {pm.test(\"qa_salary_after_6_months равен salary*2\", function () { \r",
							"    pm.expect(resp.qa_salary_after_6_months).is.to.equal(Number(requ.salary*2 ))  \r",
							"})} else if (i == 3) {pm.test(\"qa_salary_after_12_months\", function () { \r",
							"    pm.expect(JSON.stringify(resp)).to.include(\"qa_salary_after_12_months\") \r",
							"})}else if (i == 3) {\r",
							"    pm.test(\"qa_salary_after_12_months равен salary*2.7\", function () { \r",
							"    pm.expect(resp.qa_salary_after_12_months).is.to.equal(Number(requ.salary*2.7 )) \r",
							"})} else if (i==4){ \r",
							"    pm.test(\"qa_salary_after_1.5_year равен salary*3.3\", function () { \r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).is.to.equal(Number(requ.salary*3.3 )) \r",
							"})} else if (i==5){\r",
							"    pm.test(\"qa_salary_after_3.5_years равен salary*3.8\", function () { \r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).is.to.equal(Number(requ.salary*3.8 )) \r",
							"})} \r",
							"\r",
							"}\r",
							"}\r",
							"}\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "66",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Jon",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "10000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}