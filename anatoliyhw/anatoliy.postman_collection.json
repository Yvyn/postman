{
	"info": {
		"_postman_id": "90a70478-3d3b-4085-af32-77c167cae617",
		"name": "anatoliy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20888572"
	},
	"item": [
		{
			"name": "user_info_2_CSV",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"1. (ОБЯЗАТЕЛЬНОЕ И ВАЖНЕЙШЕЕ ЗАДАНИЕ) http://162.55.220.72:5005/user_info_2\r",
							"Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \r",
							"P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\r",
							"Требования:\r",
							"1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
							"2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
							"3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное**/\r",
							"\r",
							"//7. Спарсить request.\r",
							"let requ =request.data\r",
							"let name = requ.name\r",
							"let age = requ.age\r",
							"let salary = requ.salary\r",
							"\r",
							"function ageval (value) {\r",
							"    return value && !isNaN(value) &&value>17 &&value<121 && Number.isInteger(+value)\r",
							"}\r",
							"function salaryval (value) {\r",
							"    return value && !isNaN(value) &&value>0 &&value<1000001 && Number.isInteger(+value)\r",
							"}\r",
							"function nameval (value) {\r",
							"    return value && value.length >2 && value.length <41 && value.trim() === value\r",
							"}\r",
							"function dateval (name, age, salary) {\r",
							"    return ageval(age) && salaryval(salary) && nameval(name)\r",
							"}\r",
							"if (dateval (name, age, salary)){\r",
							"    pm.test(`200 code age== ${age}, salary == ${salary}, name == ${name}`, () =>{\r",
							"        pm.response.to.have.status(200);\r",
							"    })\r",
							"} else{ pm.test(`not 200 code age== ${age}, salary == ${salary}, name == ${name}`, () =>{\r",
							"        pm.response.to.not.have.status(200);\r",
							"\r",
							"})}\r",
							"         \r",
							"\r",
							"\r",
							"/*\r",
							"\r",
							"4. http://162.55.220.72:5005/user_info_2\r",
							"\r",
							"\r",
							"\r",
							"/*\r",
							"\r",
							"1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\r",
							"*/ "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4?age=21&name=Lin&salary=500",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"2. http://162.55.220.72:5007/object_info_4\r",
							"* Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary\r",
							" */\r",
							"//3. Спарсить response body в json.\r",
							"let resp = pm.response.json()\r",
							"//4. Спарсить request.\r",
							"let requ =  pm.request.url.query.toObject();\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"\r",
							"resp.salary.forEach((salary, index) => {\r",
							"    pm.test(`${requ.salary} * ${index+1} ===${salary}`, () => {\r",
							"        pm.expect(requ.salary*(index+1)).to.eql*(+salary)\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?age=21&name=Lin&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "21"
						},
						{
							"key": "name",
							"value": "Lin"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3?age=12&name=Anya&salary=100",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*3. http://162.55.220.72:5005/object_info_3\r",
							" Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов) */\r",
							"//3. Спарсить response body в json.\r",
							"\r",
							"//4. Спарсить request.\r",
							"\r",
							" //5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"\r",
							"const reqob = pm.request.url.query.toObject()\r",
							"const resob ={\r",
							"    age: String(pm.response.json().age),\r",
							"    salary: String(pm.response.json().salary),\r",
							"    name: (pm.response.json().name)\r",
							"}\r",
							"\r",
							"pm.test(\"Name Check  1\", () => { \r",
							"pm.expect(reqob).to.deep.eql(resob)\r",
							"})\r",
							"\r",
							"const jsondata = pm.response.json()\r",
							"\r",
							"const respa ={};\r",
							"for( const  key in reqob){\r",
							"respa[key]= isNaN(jsondata[key])? jsondata[key] : +jsondata[key]\r",
							"reqob[key] = isNaN(reqob[key])? reqob[key] :+reqob[key]\r",
							"\r",
							"}\r",
							"pm.test(\"Name Check  2\", () => { \r",
							"pm.expect(reqob).to.deep.eql(respa)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?age=12&name=Anya&salary=100",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "12"
						},
						{
							"key": "name",
							"value": "Anya"
						},
						{
							"key": "salary",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*\r",
							"4. http://162.55.220.72:5005/user_info_2\r",
							"1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)*/\r",
							"\r",
							"const keyInJson =[`person`,`qa_salary_after_1.5_year`, `qa_salary_after_12_months`, `qa_salary_after_3.5_years`, `qa_salary_after_6_months`, `start_qa_salary`]\r",
							"let resp =pm.response.json()\r",
							"keyInJson.forEach(key=>{\r",
							"    pm.test(`response has ${key}`, () =>{\r",
							"        pm.expect(resp).to.have.property(key)\r",
							"    }\r",
							"    )\r",
							"})\r",
							"\r",
							"/*\r",
							"2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)*/\r",
							"let requ =request.data\r",
							"const salary = pm.environment.get('salary')\r",
							"const count ={\r",
							"        \"start_qa_salary\": 1 ,\r",
							"        \"qa_salary_after_6_months\": 2 ,\r",
							"        'qa_salary_after_3.5_years' :3.8 ,\r",
							"        \"qa_salary_after_12_months\": 2.7 ,\r",
							"       \"qa_salary_after_1.5_year\": 3.3\r",
							"\r",
							"\r",
							"  \r",
							"}\r",
							"\r",
							"for (const key in count){\r",
							"pm.test(`${key} from response = salary from request * ${count[key]}`, () =>{\r",
							"    pm.expect(+resp[key]).to.equal(requ.salary*count[key])\r",
							"})\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"/*\r",
							"3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.\r",
							"*/\r",
							"\r",
							"count['person'] = ''\r",
							"\r",
							"for(const key in count) {\r",
							"    pm.test(`response has ${key}`, () =>{\r",
							"        pm.expect(resp).to.have.property(key)\r",
							"})\r",
							"if (key!='person') {pm.test(`${key} from response = salary from request * ${count[key]}`, () =>{\r",
							"    pm.expect(+resp[key]).to.equal(requ.salary*count[key])\r",
							"    })\r",
							"}}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "66",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Jon",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "10000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}